from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.urls import reverse
from django.db.models.signals import post_save
from django.dispatch import receiver
import uuid


class Company(models.Model):
    """–ú–æ–¥–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    
    COMPANY_TYPES = [
        ('LLC', '–û–û–û'),
        ('IP', '–ò–ü'),
        ('JSC', '–ê–û'),
        ('CJSC', '–ó–ê–û'),
        ('OTHER', '–î—Ä—É–≥–æ–µ'),
    ]
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    slug = models.SlugField(max_length=100, unique=True, verbose_name="URL-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    company_type = models.CharField(max_length=20, choices=COMPANY_TYPES, verbose_name="–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    phone = models.CharField(max_length=20, blank=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    email = models.EmailField(blank=True, verbose_name="Email")
    website = models.URLField(blank=True, verbose_name="–í–µ–±-—Å–∞–π—Ç")
    
    # –ê–¥—Ä–µ—Å
    address = models.TextField(blank=True, verbose_name="–ê–¥—Ä–µ—Å")
    city = models.CharField(max_length=100, blank=True, verbose_name="–ì–æ—Ä–æ–¥")
    country = models.CharField(max_length=100, default="–†–æ—Å—Å–∏—è", verbose_name="–°—Ç—Ä–∞–Ω–∞")
    
    # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    tax_number = models.CharField(max_length=50, blank=True, verbose_name="–ò–ù–ù")
    registration_number = models.CharField(max_length=50, blank=True, verbose_name="–û–ì–†–ù")
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–ø–∞–Ω–∏–∏ (—Å–æ–∑–¥–∞—Ç–µ–ª—å)
    owner = models.ForeignKey(User, on_delete=models.PROTECT, related_name='owned_companies', verbose_name="–í–ª–∞–¥–µ–ª–µ—Ü")
    
    class Meta:
        verbose_name = "–ö–æ–º–ø–∞–Ω–∏—è"
        verbose_name_plural = "–ö–æ–º–ø–∞–Ω–∏–∏"
        ordering = ['name']
    
    def __str__(self):
        return self.name
    
    def save(self, *args, **kwargs):
        if not self.slug:
            base_slug = slugify(self.name, allow_unicode=True)
            slug = base_slug
            counter = 1
            while Company.objects.filter(slug=slug).exists():
                slug = f"{base_slug}-{counter}"
                counter += 1
            self.slug = slug
        super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse('companies:dashboard', kwargs={'company_slug': self.slug})


class CompanyMembership(models.Model):
    """–ú–æ–¥–µ–ª—å —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    ROLES = [
        ('owner', '–í–ª–∞–¥–µ–ª–µ—Ü'),
        ('admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
        ('manager', '–ú–µ–Ω–µ–¥–∂–µ—Ä'),
        ('employee', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'),
        ('viewer', '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å'),
    ]
    
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='memberships')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='company_memberships')
    role = models.CharField(max_length=20, choices=ROLES, default='employee', verbose_name="–†–æ–ª—å")
    
    # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    can_manage_users = models.BooleanField(default=False, verbose_name="–ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    can_manage_orders = models.BooleanField(default=False, verbose_name="–ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏")
    can_manage_products = models.BooleanField(default=False, verbose_name="–ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏")
    can_manage_suppliers = models.BooleanField(default=False, verbose_name="–ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏")
    can_view_reports = models.BooleanField(default=False, verbose_name="–ú–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã")
    
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ")
    joined_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    
    class Meta:
        verbose_name = "–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–º–ø–∞–Ω–∏–∏"
        verbose_name_plural = "–ß–ª–µ–Ω—Å—Ç–≤–∞ –≤ –∫–æ–º–ø–∞–Ω–∏—è—Ö"
        unique_together = ['company', 'user']
    
    def __str__(self):
        return f"{self.user.username} - {self.company.name} ({self.get_role_display()})"
    
    def save(self, *args, **kwargs):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if self.role in ['owner', 'admin']:
            self.can_manage_users = True
            self.can_manage_orders = True
            self.can_manage_products = True
            self.can_manage_suppliers = True
            self.can_view_reports = True
        elif self.role == 'manager':
            self.can_manage_orders = True
            self.can_manage_products = True
            self.can_view_reports = True
        elif self.role == 'employee':
            self.can_manage_orders = True
        
        super().save(*args, **kwargs)
    
    def has_full_admin_rights(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""
        return self.role in ['owner', 'admin'] and self.is_active
    
    def can_manage_company_settings(self):
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
        return self.role == 'owner' and self.is_active
    
    def can_invite_users(self):
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return self.role in ['owner', 'admin'] and self.can_manage_users and self.is_active


class CompanySettings(models.Model):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    company = models.OneToOneField(Company, on_delete=models.CASCADE, related_name='settings')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    logo = models.ImageField(upload_to='companies/logos/', blank=True, null=True, verbose_name="–õ–æ–≥–æ—Ç–∏–ø")
    theme_color = models.CharField(max_length=7, default="#3B82F6", verbose_name="–¶–≤–µ—Ç —Ç–µ–º—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    allow_user_registration = models.BooleanField(default=False, verbose_name="–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    require_email_verification = models.BooleanField(default=True, verbose_name="–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    default_currency = models.CharField(max_length=3, default="RUB", verbose_name="–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    order_approval_required = models.BooleanField(default=True, verbose_name="–¢—Ä–µ–±–æ–≤–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤")
    
    class Meta:
        verbose_name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏"
        verbose_name_plural = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π"
    
    def __str__(self):
        return f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {self.company.name}"


@receiver(post_save, sender=Company)
def create_company_defaults(sender, instance, created, **kwargs):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–µ—Ä–≤–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    """
    if created:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
        CompanySettings.objects.get_or_create(company=instance)
        
        # –°–æ–∑–¥–∞–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        # (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ)
        membership, membership_created = CompanyMembership.objects.get_or_create(
            company=instance,
            user=instance.owner,
            defaults={
                'role': 'owner',
                'is_active': True
            }
        )
        
        if membership_created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–ø–∞–Ω–∏–∏: {instance.owner.username} –¥–ª—è {instance.name}")


@receiver(post_save, sender=CompanyMembership)
def log_membership_creation(sender, instance, created, **kwargs):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    if created:
        role_display = instance.get_role_display()
        print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–ø–∞–Ω–∏—é: {instance.user.username} ({role_display}) -> {instance.company.name}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if instance.role in ['owner', 'admin']:
            print(f"üîê –ù–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è {instance.user.username}")
            
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        permissions = []
        if instance.can_manage_users:
            permissions.append("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        if instance.can_manage_orders:
            permissions.append("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
        if instance.can_manage_products:
            permissions.append("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
        if instance.can_manage_suppliers:
            permissions.append("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏")
        if instance.can_view_reports:
            permissions.append("–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤")
            
        if permissions:
            print(f"üìã –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {', '.join(permissions)}")


class CompanyMenuSection(models.Model):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    SECTION_TYPES = [
        ('internal', '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–∑–¥–µ–ª'),
        ('external', '–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞'),
        ('iframe', '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'),
    ]
    
    ICON_CHOICES = [
        ('bi-people', '–õ—é–¥–∏'),
        ('bi-cart', '–ö–æ—Ä–∑–∏–Ω–∞'),
        ('bi-box', '–ö–æ—Ä–æ–±–∫–∞'),
        ('bi-building', '–ó–¥–∞–Ω–∏–µ'),
        ('bi-graph-up', '–ì—Ä–∞—Ñ–∏–∫'),
        ('bi-calendar', '–ö–∞–ª–µ–Ω–¥–∞—Ä—å'),
        ('bi-folder', '–ü–∞–ø–∫–∞'),
        ('bi-gear', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        ('bi-file-text', '–î–æ–∫—É–º–µ–Ω—Ç'),
        ('bi-chat', '–ß–∞—Ç'),
        ('bi-bell', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
        ('bi-shield', '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
        ('bi-tools', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'),
        ('bi-pie-chart', '–î–∏–∞–≥—Ä–∞–º–º–∞'),
        ('bi-clipboard', '–ë—É—Ñ–µ—Ä'),
        ('bi-trophy', '–¢—Ä–æ—Ñ–µ–π'),
        ('bi-star', '–ó–≤–µ–∑–¥–∞'),
        ('bi-heart', '–°–µ—Ä–¥—Ü–µ'),
        ('bi-lightning', '–ú–æ–ª–Ω–∏—è'),
        ('bi-cloud', '–û–±–ª–∞–∫–æ'),
    ]
    
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='menu_sections')
    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_menu_sections')
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞")
    description = models.CharField(max_length=200, blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    icon = models.CharField(max_length=50, choices=ICON_CHOICES, default='bi-folder', verbose_name="–ò–∫–æ–Ω–∫–∞")
    
    # –¢–∏–ø –∏ URL
    section_type = models.CharField(max_length=20, choices=SECTION_TYPES, default='internal', verbose_name="–¢–∏–ø —Ä–∞–∑–¥–µ–ª–∞")
    url = models.CharField(max_length=500, verbose_name="URL –∏–ª–∏ –ø—É—Ç—å")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    order = models.PositiveIntegerField(default=100, verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")
    open_in_new_tab = models.BooleanField(default=False, verbose_name="–û—Ç–∫—Ä—ã–≤–∞—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ")
    
    # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    required_role = models.CharField(
        max_length=20, 
        choices=CompanyMembership.ROLES, 
        default='employee',
        verbose_name="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞"
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    class Meta:
        verbose_name = "–†–∞–∑–¥–µ–ª –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–∏"
        verbose_name_plural = "–†–∞–∑–¥–µ–ª—ã –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–∏"
        ordering = ['order', 'title']
        unique_together = ['company', 'title']
    
    def __str__(self):
        return f"{self.company.name} - {self.title}"
    
    def get_full_url(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
        if self.section_type == 'external':
            return self.url
        elif self.section_type == 'internal':
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–ø–∞–Ω–∏–∏
            if self.url.startswith('/'):
                return f"/companies/{self.company.slug}{self.url}"
            else:
                return f"/companies/{self.company.slug}/{self.url}"
        elif self.section_type == 'iframe':
            return f"/companies/{self.company.slug}/iframe/{self.id}/"
        return self.url
    
    def user_can_access(self, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É"""
        try:
            membership = CompanyMembership.objects.get(
                company=self.company, 
                user=user, 
                is_active=True
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–ª–µ–π
            role_hierarchy = {
                'viewer': 1,
                'employee': 2, 
                'manager': 3,
                'admin': 4,
                'owner': 5
            }
            
            user_level = role_hierarchy.get(membership.role, 0)
            required_level = role_hierarchy.get(self.required_role, 0)
            
            return user_level >= required_level
            
        except CompanyMembership.DoesNotExist:
            return False
