#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Purchases
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–æ/—Å–µ—Ä–≤–µ—Ä) –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ª—É–∂–±—ã
"""

import os
import sys
import subprocess
import argparse
import time
import signal
import socket
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor


class ProjectStarter:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.is_server = self._detect_server_environment()
        self.processes = []
        self.venv_python = self._get_venv_python()
        
    def _detect_server_environment(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ production —Ä–µ–∂–∏–º–∞
        if os.environ.get('DJANGO_ENV') == 'production':
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        cloud_indicators = [
            os.environ.get('RAILWAY_ENVIRONMENT'),
            os.environ.get('HEROKU_APP_NAME'),
            os.environ.get('VERCEL'),
            os.environ.get('AWS_EXECUTION_ENV'),
            os.environ.get('GOOGLE_CLOUD_PROJECT'),
        ]
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        return any(cloud_indicators)
    
    def _get_venv_python(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        venv_paths = [
            self.base_dir / 'venv' / 'bin' / 'python',
            self.base_dir / '.venv' / 'bin' / 'python',
            self.base_dir / 'env' / 'bin' / 'python',
        ]
        
        for venv_path in venv_paths:
            if venv_path.exists():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {venv_path}")
                return str(venv_path)
        
        print("‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ...")
        return self._create_venv()
    
    def _create_venv(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        venv_path = self.base_dir / 'venv'
        try:
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
            subprocess.run([
                sys.executable, '-m', 'venv', str(venv_path)
            ], check=True)
            
            python_path = venv_path / 'bin' / 'python'
            if python_path.exists():
                print(f"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {python_path}")
                return str(python_path)
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Python –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
                return sys.executable
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return sys.executable
    
    def _check_port(self, port, service_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1)
                result = sock.connect_ex(('localhost', port))
                if result == 0:
                    print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç ({service_name})")
                    return False
                else:
                    print(f"‚úÖ –ü–æ—Ä—Ç {port} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {service_name}")
                    return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ {port}: {e}")
            return False
    
    def check_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        requirements_file = self.base_dir / 'requirements.txt'
        if requirements_file.exists():
            try:
                print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ {self.venv_python}...")
                subprocess.run([
                    self.venv_python, '-m', 'pip', 'install', '-r', str(requirements_file)
                ], check=True, cwd=self.base_dir)
                print("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: source venv/bin/activate")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        package_json = self.base_dir / 'package.json'
        if package_json.exists():
            try:
                subprocess.run(['npm', 'install'], check=True, cwd=self.base_dir)
                print("‚úÖ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except subprocess.CalledProcessError:
                print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
                return False
        
        return True
    
    def setup_environment(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
        print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        env_file = self.base_dir / '.env'
        if not env_file.exists():
            env_content = f"""
DEBUG={'False' if self.is_server else 'True'}
SECRET_KEY=your-secret-key-here-please-change-in-production
ALLOWED_HOSTS={'*' if not self.is_server else 'localhost,127.0.0.1'}
DATABASE_URL=sqlite:///{self.base_dir}/db.sqlite3
"""
            env_file.write_text(env_content.strip())
            print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        try:
            print("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            subprocess.run([
                self.venv_python, 'manage.py', 'migrate'
            ], check=True, cwd=self.base_dir)
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        if self.is_server:
            try:
                print("üìÅ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...")
                subprocess.run([
                    self.venv_python, 'manage.py', 'collectstatic', '--noinput'
                ], check=True, cwd=self.base_dir)
                print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")
                return False
        
        return True
    
    def build_frontend(self):
        """–°–±–æ—Ä–∫–∞ frontend —á–∞—Å—Ç–∏"""
        print("üèóÔ∏è –°–±–æ—Ä–∫–∞ frontend...")
        
        # –°–æ–±–∏—Ä–∞–µ–º Tailwind CSS
        try:
            subprocess.run([
                'npx', 'tailwindcss', '-i', './static/src/input.css', 
                '-o', './static/css/output.css', '--watch' if not self.is_server else '--minify'
            ], check=True, cwd=self.base_dir)
            print("‚úÖ Tailwind CSS —Å–æ–±—Ä–∞–Ω")
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Tailwind CSS")
            return False
        
        return True
    
    def start_django(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Django —Å–µ—Ä–≤–µ—Ä"""
        if self.is_server:
            # –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º gunicorn
            cmd = [
                'gunicorn', 
                'purchases_project.wsgi:application',
                '--bind', '0.0.0.0:8000',
                '--workers', '3',
                '--timeout', '120'
            ]
        else:
            # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            cmd = [
                self.venv_python, 'manage.py', 'runserver', '0.0.0.0:8000'
            ]
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ Django {'(production)' if self.is_server else '(development)'}...")
        process = subprocess.Popen(cmd, cwd=self.base_dir)
        self.processes.append(process)
        return process
    
    def start_frontend_dev(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
        if self.is_server:
            return None
            
        print("üé® –ó–∞–ø—É—Å–∫ frontend development —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Tailwind –≤ watch —Ä–µ–∂–∏–º–µ
        cmd = [
            'npx', 'tailwindcss', '-i', './static/src/input.css', 
            '-o', './static/css/output.css', '--watch'
        ]
        
        process = subprocess.Popen(cmd, cwd=self.base_dir)
        self.processes.append(process)
        return process
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        for process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
        sys.exit(0)
    
    def run(self, args):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print(f"üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ: {'PRODUCTION' if self.is_server else 'DEVELOPMENT'}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not args.skip_deps and not self.check_requirements():
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return 1
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not self.setup_environment():
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤
        if not self._check_port(8000, "Django"):
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç")
            return 1
        
        # –°–æ–±–∏—Ä–∞–µ–º frontend –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not args.skip_build:
            if not self.build_frontend():
                print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend")
                return 1
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        with ThreadPoolExecutor(max_workers=3) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Django
            django_future = executor.submit(self.start_django)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º frontend dev —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            frontend_future = None
            if not self.is_server and not args.backend_only:
                frontend_future = executor.submit(self.start_frontend_dev)
            
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
            print("üì° Django –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8000")
            
            if not self.is_server:
                print("üé® Frontend watch —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
                print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            try:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                django_future.result()
                if frontend_future:
                    frontend_future.result()
            except KeyboardInterrupt:
                print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                return 1
        
        return 0


def main():
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ Purchases')
    parser.add_argument('--skip-deps', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π')
    parser.add_argument('--skip-build', action='store_true', 
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É frontend')
    parser.add_argument('--backend-only', action='store_true',
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend')
    parser.add_argument('--production', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å production —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production —Ä–µ–∂–∏–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥
    if args.production:
        os.environ['DJANGO_ENV'] = 'production'
    
    starter = ProjectStarter()
    return starter.run(args)


if __name__ == '__main__':
    sys.exit(main())
